name: POC

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Git SHA Key
        id: sha_key
        run: echo "::set-output name=sha_key::$(git rev-parse --short HEAD)"

      - name: Set Date Timestamp
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d%H%M%S')"

      # - name: Set Semantic Version
      #   id: semver
      #   run: echo "::set-output name=semver::$(cat pom.xml | grep '<version>' | head -n1 | sed 's/.*<version>\(.*\)<\/version>.*/\1/')"

      - name: Get Last Release Tag
        id: last_release
        run: |
          git fetch --all
          git describe --tags --abbrev=0
          LAST_TAG=$(git describe --tags --abbrev=0)
          echo "::set-output name=last_tag::$LAST_TAG"

      - name: Determine Version Change
        id: determine_version
        run: |
          # Extract version components
          LAST_TAG="${{ steps.last_release.outputs.last_tag }}"
          LAST_MAJOR=$(echo "$LAST_TAG" | cut -d. -f1)
          LAST_MINOR=$(echo "$LAST_TAG" | cut -d. -f2)
          LAST_PATCH=$(echo "$LAST_TAG" | cut -d. -f3)

          # Extract pull request subject
          PR_SUBJECT=$(jq -r .pull_request.title $GITHUB_EVENT_PATH)
          
          echo "$PR_SUBJECT"

          # Extract commit messages
          COMMIT_MESSAGES=$(git log --format=%B ${{ github.event.before }}..${{ github.event.after }})
          echo "$COMMIT_MESSAGES"

          # Determine version change based on PR subject and commit messages
          if echo "$PR_SUBJECT" | grep -qi -e '^major' -e "^new_release_version" ; then
            NEW_MAJOR=$((LAST_MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
          elif echo "$PR_SUBJECT" | grep -qi -e '^minor' -e "^feature"; then
            NEW_MAJOR=$LAST_MAJOR
            NEW_MINOR=$((LAST_MINOR + 1))
            NEW_PATCH=0
          else
            NEW_MAJOR=$LAST_MAJOR
            NEW_MINOR=$LAST_MINOR
            NEW_PATCH=$((LAST_PATCH + 1))
          fi

          echo "::set-output name=new_major::$NEW_MAJOR"
          echo "::set-output name=new_minor::$NEW_MINOR"
          echo "::set-output name=new_patch::$NEW_PATCH"

      - name: Generate New Version
        id: semver
        run: |
          NEW_VERSION="${{ steps.determine_version.outputs.new_major }}.${{ steps.determine_version.outputs.new_minor }}.${{ steps.determine_version.outputs.new_patch }}"
          echo "::set-output name=semver::$NEW_VERSION"

      # - name: Generate Version Information
      #   id: version
      #   run: echo "::set-output name=version::$(date +'%Y%m%d%H%M%S')-$(git rev-parse --short HEAD)"

      # - name: Setup Node.js environment
      #   uses: actions/setup-node@v3
      
      # - name: Semantic Release dry run
      #   id: semantic      
      #   run: |
      #     OUTPUT=$(unset GITHUB_ACTIONS && npx semantic-release --dry-run --no-ci --branches "${{ github.head_ref }}")
      #     VERSION=$(echo "$OUTPUT" | grep -o "The next release version is [0-9]*\.[0-9]*\.[0-9]*" | awk '{print $6}')
      #     echo "::set-output name=version::$VERSION"
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Show Version
        run: | 
          echo "sha_key is ${{ steps.sha_key.outputs.sha_key }}"
          echo "date is ${{ steps.date.outputs.date }}"
          echo "semver is ${{ steps.semver.outputs.semver }}"
          echo "version is ${{ steps.version.outputs.version }}"

      - name: Build Docker image
        run: |
          docker build --build-arg VERSION="${{ steps.semver.outputs.semver }}" --build-arg DATE_TIMESTAMP="${{ steps.date.outputs.date }}" --build-arg SHA_KEY="${{ steps.sha_key.outputs.sha_key }}" -t abhishekshindeagiliad/poc:latest .
          docker tag abhishekshindeagiliad/poc:latest abhishekshindeagiliad/poc:${{ steps.sha_key.outputs.sha_key }}
          docker tag abhishekshindeagiliad/poc:latest abhishekshindeagiliad/poc:${{ steps.semver.outputs.semver }}-${{ steps.date.outputs.date }}-${{ steps.sha_key.outputs.sha_key }}
          docker tag abhishekshindeagiliad/poc:latest abhishekshindeagiliad/poc:${{ steps.semver.outputs.semver }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
      - name: Push and save Docker image
        run: |
          docker push abhishekshindeagiliad/poc:latest
          docker push abhishekshindeagiliad/poc:${{ steps.sha_key.outputs.sha_key }}
          docker push abhishekshindeagiliad/poc:${{ steps.semver.outputs.semver }}-${{ steps.date.outputs.date }}-${{ steps.sha_key.outputs.sha_key }}
          docker push abhishekshindeagiliad/poc:${{ steps.semver.outputs.semver }}
          docker save -o /tmp/poc-${{ steps.semver.outputs.semver }}-${{ steps.date.outputs.date }}-${{ steps.sha_key.outputs.sha_key }}.tar.gz abhishekshindeagiliad/poc:latest
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ steps.semver.outputs.semver }}
          release_name: Release ${{ steps.semver.outputs.semver }}
          body: |
            Release ${{ steps.semver.outputs.semver }}
          commit : Release ${{ steps.semver.outputs.semver }}
          draft: false
          prerelease: false
          
      - name: Upload Docker image to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/poc-${{ steps.semver.outputs.semver }}-${{ steps.date.outputs.date }}-${{ steps.sha_key.outputs.sha_key }}.tar.gz
          asset_name: poc-${{ steps.semver.outputs.semver }}-${{ steps.date.outputs.date }}-${{ steps.sha_key.outputs.sha_key }}.tar.gz
          asset_content_type: application/gzip
