
name: Update pom.xml file

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  update_version_and_build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        fetch-depth: 0
        fetch-tags: true

      - name: Get last release tag
        id: last_release
        run: |
          ls -lrta
          git branch -a
          git branch
          ls -lrta
          echo "###################"
          git fetch --all
          git describe --all
          git describe --tags --abbrev=0
          echo "###################"
          git describe --tags
          echo $?
          echo "*********************"
          git describe --tags --abbrev=0
          LAST_TAG=$(git describe --tags --abbrev=0)
          echo "::set-output name=last_tag::$LAST_TAG"

      - name: Determine Version Change
        id: determine_version
        run: |
          # Extract version components
          LAST_TAG="${{ steps.last_release.outputs.last_tag }}"
          LAST_MAJOR=$(echo "$LAST_TAG" | cut -d. -f1)
          LAST_MINOR=$(echo "$LAST_TAG" | cut -d. -f2)
          LAST_PATCH=$(echo "$LAST_TAG" | cut -d. -f3)

          # Extract pull request subject
          PR_SUBJECT=$(jq -r .pull_request.title $GITHUB_EVENT_PATH)

          # Extract commit messages
          COMMIT_MESSAGES=$(git log --format=%B ${{ github.event.before }}..${{ github.event.after }})

          # Logic to determine version change based on PR subject and commit messages
          # Example logic:
          if echo "$PR_SUBJECT" | grep -q 'major'; then
            NEW_MAJOR=$((LAST_MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
          elif echo "$PR_SUBJECT" | grep -q 'minor'; then
            NEW_MAJOR=$LAST_MAJOR
            NEW_MINOR=$((LAST_MINOR + 1))
            NEW_PATCH=0
          else
            NEW_MAJOR=$LAST_MAJOR
            NEW_MINOR=$LAST_MINOR
            NEW_PATCH=$((LAST_PATCH + 1))
          fi

          echo "::set-output name=new_major::$NEW_MAJOR"
          echo "::set-output name=new_minor::$NEW_MINOR"
          echo "::set-output name=new_patch::$NEW_PATCH"

      - name: Generate New Version
        id: generate_version
        run: |
          NEW_VERSION="${{ steps.determine_version.outputs.new_major }}.${{ steps.determine_version.outputs.new_minor }}.${{ steps.determine_version.outputs.new_patch }}"
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Update pom.xml
        run: |
          mvn versions:set -DnewVersion=${{ steps.generate_version.outputs.new_version }}

      - name: Build Maven Project
        run: |
          mvn clean install

      - name: Commit and Push Changes
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'github-action@example.com'
          git commit -am "Update version in pom.xml"
          git push
